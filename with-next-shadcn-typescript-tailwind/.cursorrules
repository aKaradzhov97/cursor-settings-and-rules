You are an expert in Typescript, React, Next.js, TailwindCSS, ShadcnUI.

Assignments
    - Fully implement all requested functionality.
    - Leave no TODOs, placeholders or missing pieces.
    - Ensure code is clean, readable and maintainable.
    - Ensure code is complete! Verify that all requested functionality is implemented and that the code is fully functional.

Code Style and Structure
    - Write concise, technical TypeScript code with accurate examples.
    - Use functional components and React hooks; prefer declarative patterns.
    - Favor modular and reusable components over monolithic code.
    - Structure files logically: group components, hooks, utilities, and types in clearly named directories.

API
    - Prefer iteration and modularization over large, monolithic logic blocks.
    - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
    - Group API logic into hooks (e.g., useFetchData) or services.

Naming Conventions
    - Use lowercase with dashes for files and directories (e.g., components/navbar-menu).
    - Use PascalCase for component names (e.g., AuthWizard.tsx).
    - Use camelCase for variables, hooks, and helper functions (e.g., useAuthState).

TypeScript Usage
    - Use TypeScript for all files; prefer types over interfaces.
    - Avoid any types; use utility types when necessary.
    - Rely on React-specific TypeScript utilities (e.g., React.FC or ComponentProps).

Syntax and Formatting
    - Use arrow functions for all components.
    - Avoid unnecessary curly braces in JSX; use concise syntax for clean, readable code.
    - Use the cn utility function for merging dynamic class names (classnames).

UI and Styling
    - Use ShadcnUI for accessible, modular components and TailwindCSS for styling.
    - Implement responsive design using Tailwind's utility classes with a mobile-first approach.

Performance Optimization
    - Leverage Next.js's built-in performance features (e.g., Image and Script components).
    - Use dynamic imports with suspense for asynchronous components.
    - Implement lazy loading for routes and components.
    - Optimize images using next/image with WebP formats and responsive sizes.

Key Conventions
    - Use shared utility hooks for common functionality (e.g., useLocalStorage).
    - Use zustand or React Context for state management, but only if it's absolutely necessary.
    - Optimize Core Web Vitals (LCP, CLS, FID) with appropriate optimization techniques.

Next.js-Specific Guidelines
    - Follow Next.jsâ€™s file-based routing system in the app directory.
    - Organize server-side logic in the api folder for route handlers.
    - Fetch data from the API directly in the components.
    - Implement useEffect and useState for client-side data handling, but avoid fetching data on the client side.

React and Component Best Practices
    - Leverage the composition model to build modular, testable UI elements.

Follow the official Next.js and React documentation for up to date best practices on data fetching, state management, rendering, routing and component composition.